/**
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.tests;

import com.google.inject.Inject;
import cuisine.recipe.recipe.Model;
import cuisine.recipe.tests.RecipeInjectorProvider;
import java.util.stream.Stream;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

@ExtendWith(InjectionExtension.class)
@InjectWith(RecipeInjectorProvider.class)
@SuppressWarnings("all")
public class RecipeParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  private Model recipes;
  
  @Test
  public void testRecipe() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("define grill [ustensil] ingredient");
      this.recipes = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(this.recipes);
      this._validationTestHelper.assertNoIssues(this.recipes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRecipeFail() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fromage");
      this.recipes = this.parseHelper.parse(_builder);
      Assertions.assertNull(this.recipes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static Stream<String> goodLanguageSequences() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define grill [ustensil] ingredient");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("define grease [ustensil]");
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("define cut [tool] ingredient {{small, medium, large}, {cubes, slices, bits}}");
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("define reserve ingredient");
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("define mix [ustensil] ingredient [preparation]");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("define pour ingredient [ustensil] [preparation]");
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("define grill [ustensil] ingredient");
    _builder_6.newLine();
    _builder_6.append("\t\t\t\t");
    _builder_6.append("define grease [ustensil]");
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("recipe {");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("name : Gaufres Trotro lardons Cheddar et ptits oignons");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("time : 15");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("nb_pers : 9");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("ingredients: {");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t        ");
    _builder_7.append("Lardons Fumes : 100g @lardons");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("}");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("ustensils: {");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t        ");
    _builder_7.append("Poele");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("}");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("instructions: {");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t        ");
    _builder_7.append("grill Poele Lardons Fumes \"Biens dores et croustillants\"");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t        ");
    _builder_7.append("END");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t    ");
    _builder_7.append("}");
    _builder_7.newLine();
    _builder_7.append("\t\t\t\t");
    _builder_7.append("}");
    _builder_7.newLine();
    return Stream.<String>of(_builder.toString(), _builder_1.toString(), _builder_2.toString(), _builder_3.toString(), _builder_4.toString(), _builder_5.toString(), _builder_6.toString(), _builder_7.toString());
  }
  
  @ParameterizedTest
  @MethodSource("goodLanguageSequences")
  public void testSequences(final String seq) {
    try {
      this.recipes = this.parseHelper.parse(seq);
      Assertions.assertNotNull(this.recipes);
      this._validationTestHelper.assertNoIssues(this.recipes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private /* Expected */Object no;
  
  private /* but */Object got;
}
