/*
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.tests

import com.google.inject.Inject
import cuisine.recipe.recipe.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import java.util.stream.Stream
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource

@ExtendWith(InjectionExtension)
@InjectWith(RecipeInjectorProvider)
class RecipeParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Inject extension ValidationTestHelper
	
	Model recipes;
	
	@Test
	def void testRecipe() {
		recipes = parseHelper.parse('''define grill [ustensil] ingredient''')
		Assertions.assertNotNull(recipes);
		recipes.assertNoIssues();
	}
	
	@Test
	def void testRecipeFail() {
		recipes = parseHelper.parse('''fromage''')
		Assertions.assertNull(recipes);
	}
	
	def static Stream<String> goodLanguageSequences() {
		return Stream.of(
			'''define grill [ustensil] ingredient''',
			'''define grease [ustensil]''',
			'''define cut [tool] ingredient {{small, medium, large}, {cubes, slices, bits}}''',
			'''define reserve ingredient''',
			'''define mix [ustensil] ingredient [preparation]''',
			'''define pour ingredient [ustensil] [preparation]''',
			'''define grill [ustensil] ingredient
				define grease [ustensil]''',
			'''recipe {
				    name : Gaufres Trotro (lardons Cheddar et p'tits oignons)
				
				    time : 15
				
				    nb_pers : 9
				    
				    ingredients: {
				        Lardons Fumés : 100g @lardons
				    }
				    
				    ustensils: {
				        Poele
				    }
				    
				    instructions: {
				        grill Poele Lardons Fumés "Biens dorés et croustillants"
				        END
				    }
				}
			'''
		);
	}
	
	@ParameterizedTest
	@MethodSource("goodLanguageSequences")
	def void testSequences(String seq) {
		recipes = parseHelper.parse(seq)
		Assertions.assertNotNull(recipes)
		recipes.assertNoIssues
	}	
}
