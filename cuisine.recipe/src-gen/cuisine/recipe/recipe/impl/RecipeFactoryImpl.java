/**
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.recipe.impl;

import cuisine.recipe.recipe.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RecipeFactoryImpl extends EFactoryImpl implements RecipeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RecipeFactory init()
  {
    try
    {
      RecipeFactory theRecipeFactory = (RecipeFactory)EPackage.Registry.INSTANCE.getEFactory(RecipePackage.eNS_URI);
      if (theRecipeFactory != null)
      {
        return theRecipeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RecipeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecipeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RecipePackage.MODEL: return createModel();
      case RecipePackage.TECHNIQUE: return createTechnique();
      case RecipePackage.CHOICES: return createchoices();
      case RecipePackage.RECIPE: return createRecipe();
      case RecipePackage.USTENSILS: return createUstensils();
      case RecipePackage.USTENSIL: return createUstensil();
      case RecipePackage.INGREDIENTS: return createIngredients();
      case RecipePackage.INGREDIENT: return createIngredient();
      case RecipePackage.QUANTIFICATEURS: return createQuantificateurs();
      case RecipePackage.INSTRUCTIONS: return createInstructions();
      case RecipePackage.INSTRUCTION: return createInstruction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Technique createTechnique()
  {
    TechniqueImpl technique = new TechniqueImpl();
    return technique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public choices createchoices()
  {
    choicesImpl choices = new choicesImpl();
    return choices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Recipe createRecipe()
  {
    RecipeImpl recipe = new RecipeImpl();
    return recipe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ustensils createUstensils()
  {
    UstensilsImpl ustensils = new UstensilsImpl();
    return ustensils;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ustensil createUstensil()
  {
    UstensilImpl ustensil = new UstensilImpl();
    return ustensil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ingredients createIngredients()
  {
    IngredientsImpl ingredients = new IngredientsImpl();
    return ingredients;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ingredient createIngredient()
  {
    IngredientImpl ingredient = new IngredientImpl();
    return ingredient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantificateurs createQuantificateurs()
  {
    QuantificateursImpl quantificateurs = new QuantificateursImpl();
    return quantificateurs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instructions createInstructions()
  {
    InstructionsImpl instructions = new InstructionsImpl();
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecipePackage getRecipePackage()
  {
    return (RecipePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RecipePackage getPackage()
  {
    return RecipePackage.eINSTANCE;
  }

} //RecipeFactoryImpl
