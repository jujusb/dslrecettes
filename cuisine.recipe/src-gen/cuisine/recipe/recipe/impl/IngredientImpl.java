/**
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.recipe.impl;

import cuisine.recipe.recipe.Ingredient;
import cuisine.recipe.recipe.Quantificateurs;
import cuisine.recipe.recipe.RecipePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ingredient</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getName <em>Name</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getSuitenameIngredient <em>Suitename Ingredient</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getQte <em>Qte</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getQuantificateur <em>Quantificateur</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getGroup <em>Group</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.IngredientImpl#getTag <em>Tag</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IngredientImpl extends MinimalEObjectImpl.Container implements Ingredient
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuitenameIngredient() <em>Suitename Ingredient</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuitenameIngredient()
   * @generated
   * @ordered
   */
  protected EList<String> suitenameIngredient;

  /**
   * The default value of the '{@link #getQte() <em>Qte</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQte()
   * @generated
   * @ordered
   */
  protected static final double QTE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getQte() <em>Qte</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQte()
   * @generated
   * @ordered
   */
  protected double qte = QTE_EDEFAULT;

  /**
   * The cached value of the '{@link #getQuantificateur() <em>Quantificateur</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantificateur()
   * @generated
   * @ordered
   */
  protected Quantificateurs quantificateur;

  /**
   * The default value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected static final String GROUP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected String group = GROUP_EDEFAULT;

  /**
   * The default value of the '{@link #getTag() <em>Tag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTag()
   * @generated
   * @ordered
   */
  protected static final String TAG_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTag() <em>Tag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTag()
   * @generated
   * @ordered
   */
  protected String tag = TAG_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IngredientImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RecipePackage.Literals.INGREDIENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSuitenameIngredient()
  {
    if (suitenameIngredient == null)
    {
      suitenameIngredient = new EDataTypeEList<String>(String.class, this, RecipePackage.INGREDIENT__SUITENAME_INGREDIENT);
    }
    return suitenameIngredient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getQte()
  {
    return qte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQte(double newQte)
  {
    double oldQte = qte;
    qte = newQte;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__QTE, oldQte, qte));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantificateurs getQuantificateur()
  {
    return quantificateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuantificateur(Quantificateurs newQuantificateur, NotificationChain msgs)
  {
    Quantificateurs oldQuantificateur = quantificateur;
    quantificateur = newQuantificateur;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__QUANTIFICATEUR, oldQuantificateur, newQuantificateur);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantificateur(Quantificateurs newQuantificateur)
  {
    if (newQuantificateur != quantificateur)
    {
      NotificationChain msgs = null;
      if (quantificateur != null)
        msgs = ((InternalEObject)quantificateur).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RecipePackage.INGREDIENT__QUANTIFICATEUR, null, msgs);
      if (newQuantificateur != null)
        msgs = ((InternalEObject)newQuantificateur).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RecipePackage.INGREDIENT__QUANTIFICATEUR, null, msgs);
      msgs = basicSetQuantificateur(newQuantificateur, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__QUANTIFICATEUR, newQuantificateur, newQuantificateur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGroup()
  {
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroup(String newGroup)
  {
    String oldGroup = group;
    group = newGroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__GROUP, oldGroup, group));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTag()
  {
    return tag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTag(String newTag)
  {
    String oldTag = tag;
    tag = newTag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.INGREDIENT__TAG, oldTag, tag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RecipePackage.INGREDIENT__QUANTIFICATEUR:
        return basicSetQuantificateur(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RecipePackage.INGREDIENT__NAME:
        return getName();
      case RecipePackage.INGREDIENT__SUITENAME_INGREDIENT:
        return getSuitenameIngredient();
      case RecipePackage.INGREDIENT__QTE:
        return getQte();
      case RecipePackage.INGREDIENT__QUANTIFICATEUR:
        return getQuantificateur();
      case RecipePackage.INGREDIENT__GROUP:
        return getGroup();
      case RecipePackage.INGREDIENT__TAG:
        return getTag();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RecipePackage.INGREDIENT__NAME:
        setName((String)newValue);
        return;
      case RecipePackage.INGREDIENT__SUITENAME_INGREDIENT:
        getSuitenameIngredient().clear();
        getSuitenameIngredient().addAll((Collection<? extends String>)newValue);
        return;
      case RecipePackage.INGREDIENT__QTE:
        setQte((Double)newValue);
        return;
      case RecipePackage.INGREDIENT__QUANTIFICATEUR:
        setQuantificateur((Quantificateurs)newValue);
        return;
      case RecipePackage.INGREDIENT__GROUP:
        setGroup((String)newValue);
        return;
      case RecipePackage.INGREDIENT__TAG:
        setTag((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RecipePackage.INGREDIENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RecipePackage.INGREDIENT__SUITENAME_INGREDIENT:
        getSuitenameIngredient().clear();
        return;
      case RecipePackage.INGREDIENT__QTE:
        setQte(QTE_EDEFAULT);
        return;
      case RecipePackage.INGREDIENT__QUANTIFICATEUR:
        setQuantificateur((Quantificateurs)null);
        return;
      case RecipePackage.INGREDIENT__GROUP:
        setGroup(GROUP_EDEFAULT);
        return;
      case RecipePackage.INGREDIENT__TAG:
        setTag(TAG_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RecipePackage.INGREDIENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RecipePackage.INGREDIENT__SUITENAME_INGREDIENT:
        return suitenameIngredient != null && !suitenameIngredient.isEmpty();
      case RecipePackage.INGREDIENT__QTE:
        return qte != QTE_EDEFAULT;
      case RecipePackage.INGREDIENT__QUANTIFICATEUR:
        return quantificateur != null;
      case RecipePackage.INGREDIENT__GROUP:
        return GROUP_EDEFAULT == null ? group != null : !GROUP_EDEFAULT.equals(group);
      case RecipePackage.INGREDIENT__TAG:
        return TAG_EDEFAULT == null ? tag != null : !TAG_EDEFAULT.equals(tag);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", suitenameIngredient: ");
    result.append(suitenameIngredient);
    result.append(", qte: ");
    result.append(qte);
    result.append(", group: ");
    result.append(group);
    result.append(", tag: ");
    result.append(tag);
    result.append(')');
    return result.toString();
  }

} //IngredientImpl
