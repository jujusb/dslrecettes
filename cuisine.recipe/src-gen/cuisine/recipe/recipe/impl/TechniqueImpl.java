/**
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.recipe.impl;

import cuisine.recipe.recipe.RecipePackage;
import cuisine.recipe.recipe.Technique;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Technique</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cuisine.recipe.recipe.impl.TechniqueImpl#getName <em>Name</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.TechniqueImpl#getObjectsFac <em>Objects Fac</em>}</li>
 *   <li>{@link cuisine.recipe.recipe.impl.TechniqueImpl#getObjects <em>Objects</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TechniqueImpl extends choicesImpl implements Technique
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getObjectsFac() <em>Objects Fac</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectsFac()
   * @generated
   * @ordered
   */
  protected EList<String> objectsFac;

  /**
   * The cached value of the '{@link #getObjects() <em>Objects</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjects()
   * @generated
   * @ordered
   */
  protected EList<String> objects;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TechniqueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RecipePackage.Literals.TECHNIQUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipePackage.TECHNIQUE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getObjectsFac()
  {
    if (objectsFac == null)
    {
      objectsFac = new EDataTypeEList<String>(String.class, this, RecipePackage.TECHNIQUE__OBJECTS_FAC);
    }
    return objectsFac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getObjects()
  {
    if (objects == null)
    {
      objects = new EDataTypeEList<String>(String.class, this, RecipePackage.TECHNIQUE__OBJECTS);
    }
    return objects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RecipePackage.TECHNIQUE__NAME:
        return getName();
      case RecipePackage.TECHNIQUE__OBJECTS_FAC:
        return getObjectsFac();
      case RecipePackage.TECHNIQUE__OBJECTS:
        return getObjects();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RecipePackage.TECHNIQUE__NAME:
        setName((String)newValue);
        return;
      case RecipePackage.TECHNIQUE__OBJECTS_FAC:
        getObjectsFac().clear();
        getObjectsFac().addAll((Collection<? extends String>)newValue);
        return;
      case RecipePackage.TECHNIQUE__OBJECTS:
        getObjects().clear();
        getObjects().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RecipePackage.TECHNIQUE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RecipePackage.TECHNIQUE__OBJECTS_FAC:
        getObjectsFac().clear();
        return;
      case RecipePackage.TECHNIQUE__OBJECTS:
        getObjects().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RecipePackage.TECHNIQUE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RecipePackage.TECHNIQUE__OBJECTS_FAC:
        return objectsFac != null && !objectsFac.isEmpty();
      case RecipePackage.TECHNIQUE__OBJECTS:
        return objects != null && !objects.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", objectsFac: ");
    result.append(objectsFac);
    result.append(", objects: ");
    result.append(objects);
    result.append(')');
    return result.toString();
  }

} //TechniqueImpl
