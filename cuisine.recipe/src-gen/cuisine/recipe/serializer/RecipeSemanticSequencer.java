/*
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.serializer;

import com.google.inject.Inject;
import cuisine.recipe.recipe.Ingredient;
import cuisine.recipe.recipe.Ingredients;
import cuisine.recipe.recipe.Instruction;
import cuisine.recipe.recipe.Instructions;
import cuisine.recipe.recipe.Model;
import cuisine.recipe.recipe.Quantificateurs;
import cuisine.recipe.recipe.Recipe;
import cuisine.recipe.recipe.RecipePackage;
import cuisine.recipe.recipe.Technique;
import cuisine.recipe.recipe.Ustensil;
import cuisine.recipe.recipe.Ustensils;
import cuisine.recipe.services.RecipeGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RecipeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RecipeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RecipePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RecipePackage.INGREDIENT:
				sequence_Ingredient(context, (Ingredient) semanticObject); 
				return; 
			case RecipePackage.INGREDIENTS:
				sequence_Ingredients(context, (Ingredients) semanticObject); 
				return; 
			case RecipePackage.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case RecipePackage.INSTRUCTIONS:
				sequence_Instructions(context, (Instructions) semanticObject); 
				return; 
			case RecipePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RecipePackage.QUANTIFICATEURS:
				sequence_Quantificateurs(context, (Quantificateurs) semanticObject); 
				return; 
			case RecipePackage.RECIPE:
				sequence_Recipe(context, (Recipe) semanticObject); 
				return; 
			case RecipePackage.TECHNIQUE:
				sequence_Technique_choices(context, (Technique) semanticObject); 
				return; 
			case RecipePackage.USTENSIL:
				sequence_Ustensil(context, (Ustensil) semanticObject); 
				return; 
			case RecipePackage.USTENSILS:
				sequence_Ustensils(context, (Ustensils) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Ingredient returns Ingredient
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         suitenameIngredient+=ID* 
	 *         qte=DOUBLE 
	 *         quantificateur=Quantificateurs 
	 *         group=ID? 
	 *         tag=ID?
	 *     )
	 */
	protected void sequence_Ingredient(ISerializationContext context, Ingredient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ingredients returns Ingredients
	 *
	 * Constraint:
	 *     ingr+=Ingredient*
	 */
	protected void sequence_Ingredients(ISerializationContext context, Ingredients semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (name=ID obj+=ID* preparation=Ingredient?)
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns Instructions
	 *
	 * Constraint:
	 *     {Instructions}
	 */
	protected void sequence_Instructions(ISerializationContext context, Instructions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((defTechniques+=Technique+ recipes+=Recipe+) | recipes+=Recipe+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Quantificateurs returns Quantificateurs
	 *
	 * Constraint:
	 *     unit=Unit?
	 */
	protected void sequence_Quantificateurs(ISerializationContext context, Quantificateurs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Recipe returns Recipe
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         suitename+=ID* 
	 *         time=DOUBLE 
	 *         nb=DOUBLE 
	 *         ingredients=Ingredients 
	 *         ustensils=Ustensils 
	 *         instructions=Instructions
	 *     )
	 */
	protected void sequence_Recipe(ISerializationContext context, Recipe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technique returns Technique
	 *
	 * Constraint:
	 *     (name=ID (objectsFac+=IngrUslTech | objects+=IngrUslTech | (choix+=ID choix+=ID*))+)
	 */
	protected void sequence_Technique_choices(ISerializationContext context, Technique semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ustensil returns Ustensil
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Ustensil(ISerializationContext context, Ustensil semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipePackage.Literals.USTENSIL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipePackage.Literals.USTENSIL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUstensilAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ustensils returns Ustensils
	 *
	 * Constraint:
	 *     ustr+=Ustensil*
	 */
	protected void sequence_Ustensils(ISerializationContext context, Ustensils semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
