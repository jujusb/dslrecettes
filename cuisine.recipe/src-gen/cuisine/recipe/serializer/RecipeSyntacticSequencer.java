/*
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.serializer;

import com.google.inject.Inject;
import cuisine.recipe.services.RecipeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RecipeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RecipeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Quantificateurs_CCKeyword_0_1_or_CSKeyword_1_1_or_GKeyword_2_2_0_or_LKeyword_2_2_1;
	protected AbstractElementAlias match_Quantificateurs_GKeyword_2_2_0_or_LKeyword_2_2_1;
	protected AbstractElementAlias match_choices_LeftCurlyBracketKeyword_1_0_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RecipeGrammarAccess) access;
		match_Quantificateurs_CCKeyword_0_1_or_CSKeyword_1_1_or_GKeyword_2_2_0_or_LKeyword_2_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getCCKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getCSKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getGKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getLKeyword_2_2_1()));
		match_Quantificateurs_GKeyword_2_2_0_or_LKeyword_2_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getGKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getQuantificateursAccess().getLKeyword_2_2_1()));
		match_choices_LeftCurlyBracketKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getChoicesAccess().getLeftCurlyBracketKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Quantificateurs_CCKeyword_0_1_or_CSKeyword_1_1_or_GKeyword_2_2_0_or_LKeyword_2_2_1.equals(syntax))
				emit_Quantificateurs_CCKeyword_0_1_or_CSKeyword_1_1_or_GKeyword_2_2_0_or_LKeyword_2_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Quantificateurs_GKeyword_2_2_0_or_LKeyword_2_2_1.equals(syntax))
				emit_Quantificateurs_GKeyword_2_2_0_or_LKeyword_2_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_choices_LeftCurlyBracketKeyword_1_0_a.equals(syntax))
				emit_choices_LeftCurlyBracketKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'càc' | 'càs' | 'g' | 'l'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Quantificateurs_CCKeyword_0_1_or_CSKeyword_1_1_or_GKeyword_2_2_0_or_LKeyword_2_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'g' | 'l'
	 *
	 * This ambiguous syntax occurs at:
	 *     unit=Unit (ambiguity) (rule end)
	 */
	protected void emit_Quantificateurs_GKeyword_2_2_0_or_LKeyword_2_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'*
	 *
	 * This ambiguous syntax occurs at:
	 *     choix+=ID '}' '{' (ambiguity) choix+=ID
	 *     name=ID '{' (ambiguity) choix+=ID
	 *     objects+=IngrUslTech '{' (ambiguity) choix+=ID
	 *     objectsFac+=IngrUslTech ']' '{' (ambiguity) choix+=ID
	 */
	protected void emit_choices_LeftCurlyBracketKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
