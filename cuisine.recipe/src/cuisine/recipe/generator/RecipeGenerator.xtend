/*
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.generator

import cuisine.recipe.recipe.CustomString
import cuisine.recipe.recipe.Ingredient
import cuisine.recipe.recipe.IngredientList
import cuisine.recipe.recipe.Instruction
import cuisine.recipe.recipe.InstructionParameter
import cuisine.recipe.recipe.InstructionList
import cuisine.recipe.recipe.Model
import cuisine.recipe.recipe.Quantifier
import cuisine.recipe.recipe.Quantity
import cuisine.recipe.recipe.Recipe
import cuisine.recipe.recipe.Utensil
import cuisine.recipe.recipe.UtensilList
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RecipeGenerator extends AbstractGenerator {
	Model globalmodel
	Recipe currentRecipe
	
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext ctx){
		fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("tex").lastSegment,
			res.allContents.filter(Model).toIterable.head.compile.toString
		)
		globalmodel=res.allContents.filter(Model).toIterable.head
	}

	def dispatch compile(Object object) '''this statement is not supported:«object»'''
	
	def dispatch compile(Recipe recipe) '''«getRecipe(recipe)»\section{«recipe.name.compile»}
Preparation et cuisson:«recipe.time» minutes


Pour «recipe.nb» personnes


Ingrédients:
«IF recipe.ingredients!==null»«recipe.ingredients.compile»«ENDIF»


Utensils:
«IF recipe.utensils!==null»«recipe.utensils.compile»«ENDIF»


Instructions:
«IF recipe.instructions!==null»«recipe.instructions.compile»«ENDIF»


'''

   def dispatch compile(UtensilList uts) '''
	\begin{itemize}
	«FOR ing : uts.uten»
		\item «ing.compile»
	«ENDFOR»
	\end{itemize}
	'''

   def dispatch compile(Utensil ust) '''«ust.name.compile»'''

   def dispatch compile(IngredientList ingrs) '''
	\begin{itemize}
	«FOR ing : ingrs.ingr»
		\item «ing.compile»
	«ENDFOR»
	\end{itemize}
	'''
	
	def dispatch compile(Ingredient ing) '''«IF ing.qty!==null»«ing.qty.compile»«ENDIF»«IF ing.name!==null»«ing.name.compile»«ENDIF»'''

	def dispatch compile(Quantity qty) '''«IF qty.qt==0.0»quelques «ELSEIF qty.quantifier!==null»«qty.qt» «qty.quantifier.compile» de «ELSE»«qty.qt» «ENDIF»''' 

	def dispatch compile(Quantifier qt) '''«IF qt.mesure.equals("càc")|| qt.mesure.equals("cc")»cuillère à café«ELSEIF qt.mesure.equals("càs")|| qt.mesure.equals("cs")»cuillère à soupe«ELSEIF qt.mesure!==null»«qt.mesure»«ENDIF»'''

   def dispatch compile(InstructionList insts) '''
	\begin{enumerate}
	«FOR inst : insts.inst»
		\item «inst.compile»
	«ENDFOR»
	\end{enumerate}
	''' 

   def dispatch compile(Instruction inst) '''
	«inst.technique.replaceAll("_","\\\\_")» «FOR parameter : inst.parameters»«parameter.compile»«ENDFOR»«IF inst.comment!==null»«inst.comment»«ENDIF»
	''' //TODO remove les guillemets pour comments

	def dispatch compile(InstructionParameter param) '''«IF param.parameter!==null»«param.parameter.compile» «ELSEIF param.atag!=null»«getIngredientOrUtensilFromATag(param.atag).compile» «ELSEIF param.htag!=null»[«FOR s : getIngredientsFromHTag(param.htag)»«s.compile» «ENDFOR»] «ELSEIF param.time!==null»«param.qte» «param.time» «ELSEIF param.temp!==null»«param.qte» «param.temp» «ELSEIF param.qte!==0 && param.qt!=null»«param.qte» «param.qt.compile» «ENDIF»'''

	def dispatch compile(CustomString str) '''«FOR s : str.name»«s.replaceAll("_","\\\\_")» «ENDFOR»'''
	
	
	def dispatch compile(Model model) '''«IF model.recipes.length!==0»\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{float}
\usepackage[a4paper, total={6in, 8in}]{geometry}

\geometry{
 total={160mm,257mm},
 left=25mm,
 top=20mm,
 tmargin=30mm,
 bmargin=30mm,
}

\title{Livre de recettes}
\author{}
\date{}
\begin{document}

\maketitle
«FOR recipe : model.recipes»
	«recipe.compile»
«ENDFOR»
\end{document}
«ENDIF»
'''	
	def void getRecipe(Recipe r) {
		currentRecipe=r
	}
	
	def CustomString getIngredientOrUtensilFromATag(String atag) {
		for(Ingredient i : currentRecipe.ingredients.ingr) {
			if(i.tag!==null) {
				if(i.tag.equals(atag)) {
					return i.name;
				}
			}
		}
		for(Utensil u : currentRecipe.utensils.uten) {
			if(u.tag!==null) {
				if(u.tag.equals(atag)) {
					return u.name;
				}
			}
		}
	}
	
	List<CustomString> ingredients;
	def List<CustomString> getIngredientsFromHTag(String htag) {
		ingredients=new ArrayList
		for(Ingredient i : currentRecipe.ingredients.ingr) {
			if(i.group!==null) {
				if(i.group.equals(htag)) {
					ingredients.add(i.name);
				}
			}
		}
		return ingredients;
	}
}
