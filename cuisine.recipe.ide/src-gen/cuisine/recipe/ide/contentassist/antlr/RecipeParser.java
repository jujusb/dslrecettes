/*
 * generated by Xtext 2.23.0
 */
package cuisine.recipe.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import cuisine.recipe.ide.contentassist.antlr.internal.InternalRecipeParser;
import cuisine.recipe.services.RecipeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RecipeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RecipeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RecipeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTechniqueAccess().getAlternatives_2(), "rule__Technique__Alternatives_2");
			builder.put(grammarAccess.getChoicesAccess().getAlternatives(), "rule__Choices__Alternatives");
			builder.put(grammarAccess.getIngrUslTechAccess().getAlternatives(), "rule__IngrUslTech__Alternatives");
			builder.put(grammarAccess.getQuantificateursAccess().getAlternatives(), "rule__Quantificateurs__Alternatives");
			builder.put(grammarAccess.getQuantificateursAccess().getAlternatives_2_2(), "rule__Quantificateurs__Alternatives_2_2");
			builder.put(grammarAccess.getUnitAccess().getAlternatives(), "rule__Unit__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getTechniqueAccess().getGroup(), "rule__Technique__Group__0");
			builder.put(grammarAccess.getTechniqueAccess().getGroup_2_0(), "rule__Technique__Group_2_0__0");
			builder.put(grammarAccess.getTechniqueAccess().getGroup_2_2(), "rule__Technique__Group_2_2__0");
			builder.put(grammarAccess.getChoicesAccess().getGroup_0(), "rule__Choices__Group_0__0");
			builder.put(grammarAccess.getChoicesAccess().getGroup_0_1(), "rule__Choices__Group_0_1__0");
			builder.put(grammarAccess.getChoicesAccess().getGroup_1(), "rule__Choices__Group_1__0");
			builder.put(grammarAccess.getChoicesAccess().getGroup_1_3(), "rule__Choices__Group_1_3__0");
			builder.put(grammarAccess.getRecipeAccess().getGroup(), "rule__Recipe__Group__0");
			builder.put(grammarAccess.getUstensilsAccess().getGroup(), "rule__Ustensils__Group__0");
			builder.put(grammarAccess.getIngredientsAccess().getGroup(), "rule__Ingredients__Group__0");
			builder.put(grammarAccess.getIngredientAccess().getGroup(), "rule__Ingredient__Group__0");
			builder.put(grammarAccess.getIngredientAccess().getGroup_5(), "rule__Ingredient__Group_5__0");
			builder.put(grammarAccess.getIngredientAccess().getGroup_6(), "rule__Ingredient__Group_6__0");
			builder.put(grammarAccess.getQuantificateursAccess().getGroup_0(), "rule__Quantificateurs__Group_0__0");
			builder.put(grammarAccess.getQuantificateursAccess().getGroup_1(), "rule__Quantificateurs__Group_1__0");
			builder.put(grammarAccess.getQuantificateursAccess().getGroup_2(), "rule__Quantificateurs__Group_2__0");
			builder.put(grammarAccess.getInstructionsAccess().getGroup(), "rule__Instructions__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_2(), "rule__Instruction__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getDefTechniquesAssignment_0(), "rule__Model__DefTechniquesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRecipesAssignment_1(), "rule__Model__RecipesAssignment_1");
			builder.put(grammarAccess.getTechniqueAccess().getNameAssignment_1(), "rule__Technique__NameAssignment_1");
			builder.put(grammarAccess.getTechniqueAccess().getObjectsFacAssignment_2_0_1(), "rule__Technique__ObjectsFacAssignment_2_0_1");
			builder.put(grammarAccess.getTechniqueAccess().getObjectsAssignment_2_1(), "rule__Technique__ObjectsAssignment_2_1");
			builder.put(grammarAccess.getChoicesAccess().getChoixAssignment_0_0(), "rule__Choices__ChoixAssignment_0_0");
			builder.put(grammarAccess.getChoicesAccess().getChoixAssignment_0_1_1(), "rule__Choices__ChoixAssignment_0_1_1");
			builder.put(grammarAccess.getRecipeAccess().getNameAssignment_4(), "rule__Recipe__NameAssignment_4");
			builder.put(grammarAccess.getRecipeAccess().getSuitenameAssignment_5(), "rule__Recipe__SuitenameAssignment_5");
			builder.put(grammarAccess.getRecipeAccess().getTimeAssignment_8(), "rule__Recipe__TimeAssignment_8");
			builder.put(grammarAccess.getRecipeAccess().getNbAssignment_11(), "rule__Recipe__NbAssignment_11");
			builder.put(grammarAccess.getRecipeAccess().getIngredientsAssignment_12(), "rule__Recipe__IngredientsAssignment_12");
			builder.put(grammarAccess.getRecipeAccess().getUstensilsAssignment_13(), "rule__Recipe__UstensilsAssignment_13");
			builder.put(grammarAccess.getRecipeAccess().getInstructionsAssignment_14(), "rule__Recipe__InstructionsAssignment_14");
			builder.put(grammarAccess.getUstensilsAccess().getUstrAssignment_4(), "rule__Ustensils__UstrAssignment_4");
			builder.put(grammarAccess.getUstensilAccess().getNameAssignment(), "rule__Ustensil__NameAssignment");
			builder.put(grammarAccess.getIngredientsAccess().getIngrAssignment_4(), "rule__Ingredients__IngrAssignment_4");
			builder.put(grammarAccess.getIngredientAccess().getNameAssignment_0(), "rule__Ingredient__NameAssignment_0");
			builder.put(grammarAccess.getIngredientAccess().getSuitenameIngredientAssignment_1(), "rule__Ingredient__SuitenameIngredientAssignment_1");
			builder.put(grammarAccess.getIngredientAccess().getQteAssignment_3(), "rule__Ingredient__QteAssignment_3");
			builder.put(grammarAccess.getIngredientAccess().getQuantificateurAssignment_4(), "rule__Ingredient__QuantificateurAssignment_4");
			builder.put(grammarAccess.getIngredientAccess().getGroupAssignment_5_1(), "rule__Ingredient__GroupAssignment_5_1");
			builder.put(grammarAccess.getIngredientAccess().getTagAssignment_6_1(), "rule__Ingredient__TagAssignment_6_1");
			builder.put(grammarAccess.getQuantificateursAccess().getUnitAssignment_2_1(), "rule__Quantificateurs__UnitAssignment_2_1");
			builder.put(grammarAccess.getInstructionAccess().getNameAssignment_0(), "rule__Instruction__NameAssignment_0");
			builder.put(grammarAccess.getInstructionAccess().getObjAssignment_1(), "rule__Instruction__ObjAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getPreparationAssignment_2_1(), "rule__Instruction__PreparationAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RecipeGrammarAccess grammarAccess;

	@Override
	protected InternalRecipeParser createParser() {
		InternalRecipeParser result = new InternalRecipeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RecipeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RecipeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
